auto zip = make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 40*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 40*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 40*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 25, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 26, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 27, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 28, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 29, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 30, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 31, make_transform_iterator(counting_iterator<int>(0), 40*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 32, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 33, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 34, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 35, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 36, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 37, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 38, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fci.begin() + 39, make_transform_iterator(counting_iterator<int>(0), 40*_1)))))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 40*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 40*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 40*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 25, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 26, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 27, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 28, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 29, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 30, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 31, make_transform_iterator(counting_iterator<int>(0), 40*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 32, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 33, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 34, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 35, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 36, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 37, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 38, make_transform_iterator(counting_iterator<int>(0), 40*_1)), make_permutation_iterator(fi.begin() + 39, make_transform_iterator(counting_iterator<int>(0), 40*_1)))))))), make_zip_iterator(make_tuple(U0i.begin(), U0pi.begin())), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(dUi.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(dUi.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(dUi.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(dUi.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(dUi.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 5*_1)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(Ji.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(Ji.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(Ji.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(Ji.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(Ji.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 5*_1)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(Jpi.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(Jpi.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(Jpi.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(Jpi.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(Jpi.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 5*_1)))))))), mui.begin(), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(norm1i.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(norm1i.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(norm1i.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(norm1i.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(norm1i.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 5*_1)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(norm2i.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(norm2i.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(norm2i.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(norm2i.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(norm2i.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 5*_1)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(norm3i.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(norm3i.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(norm3i.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(norm3i.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 5*_1)), make_permutation_iterator(norm3i.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 5*_1)))))), Hi.begin()));
auto zipend = make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 25, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 26, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 27, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 28, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 29, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 30, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 31, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 32, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 33, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 34, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 35, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 36, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 37, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 38, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fci.begin() + 39, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 25, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 26, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 27, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 28, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 29, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 30, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 31, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 32, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 33, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 34, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 35, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 36, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 37, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 38, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L, make_permutation_iterator(fi.begin() + 39, make_transform_iterator(counting_iterator<int>(0), 40*_1)) + N*L)))))), make_zip_iterator(make_tuple(U0i.end(), U0pi.end())), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(dUi.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(dUi.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(dUi.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(dUi.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(dUi.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L)))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(Ji.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(Ji.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(Ji.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(Ji.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(Ji.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L)))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(Jpi.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L)))))), mui.end(), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(norm1i.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L)))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(norm2i.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L)))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(norm3i.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 5*_1)) + N*L)))), Hi.end()));
