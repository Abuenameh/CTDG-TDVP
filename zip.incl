auto zip = make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 25, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 26, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 27, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 28, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 29, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 30, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 31, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 32, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 33, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 34, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 35, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 36, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 37, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 38, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 39, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 40, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 41, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 42, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 43, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 44, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 45, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 46, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 47, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 48, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 49, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 50, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 51, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 52, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 53, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 54, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 55, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 56, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 57, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 58, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 59, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 60, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 61, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 62, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 63, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 64, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 65, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 66, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 67, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 68, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 69, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 70, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 71, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 72, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 73, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 74, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 75, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 76, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 77, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 78, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 79, make_transform_iterator(counting_iterator<int>(0), 200*_1)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 80, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 81, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 82, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 83, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 84, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 85, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 86, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 87, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 88, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 89, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 90, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 91, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 92, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 93, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 94, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 95, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 96, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 97, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 98, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 99, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 100, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 101, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 102, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 103, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 104, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 105, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 106, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 107, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 108, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 109, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 110, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 111, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 112, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 113, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 114, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 115, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 116, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 117, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 118, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 119, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 120, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 121, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 122, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 123, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 124, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 125, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 126, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 127, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 128, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 129, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 130, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 131, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 132, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 133, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 134, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 135, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 136, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 137, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 138, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 139, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 140, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 141, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 142, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 143, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 144, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 145, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 146, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 147, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 148, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 149, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 150, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 151, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 152, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 153, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 154, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 155, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 156, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 157, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 158, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 159, make_transform_iterator(counting_iterator<int>(0), 200*_1)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 160, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 161, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 162, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 163, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 164, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 165, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 166, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 167, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 168, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 169, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 170, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 171, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 172, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 173, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 174, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 175, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 176, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 177, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 178, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 179, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 180, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 181, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 182, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 183, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 184, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 185, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 186, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 187, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 188, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 189, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 190, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 191, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 192, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 193, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 194, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 195, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 196, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 197, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 198, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fci.begin() + 199, make_transform_iterator(counting_iterator<int>(0), 200*_1)))))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 25, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 26, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 27, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 28, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 29, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 30, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 31, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 32, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 33, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 34, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 35, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 36, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 37, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 38, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 39, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 40, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 41, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 42, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 43, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 44, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 45, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 46, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 47, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 48, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 49, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 50, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 51, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 52, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 53, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 54, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 55, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 56, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 57, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 58, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 59, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 60, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 61, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 62, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 63, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 64, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 65, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 66, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 67, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 68, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 69, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 70, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 71, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 72, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 73, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 74, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 75, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 76, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 77, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 78, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 79, make_transform_iterator(counting_iterator<int>(0), 200*_1)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 80, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 81, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 82, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 83, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 84, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 85, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 86, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 87, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 88, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 89, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 90, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 91, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 92, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 93, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 94, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 95, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 96, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 97, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 98, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 99, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 100, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 101, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 102, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 103, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 104, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 105, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 106, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 107, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 108, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 109, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 110, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 111, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 112, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 113, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 114, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 115, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 116, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 117, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 118, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 119, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 120, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 121, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 122, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 123, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 124, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 125, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 126, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 127, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 128, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 129, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 130, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 131, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 132, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 133, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 134, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 135, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 136, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 137, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 138, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 139, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 140, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 141, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 142, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 143, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 144, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 145, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 146, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 147, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 148, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 149, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 150, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 151, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 152, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 153, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 154, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 155, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 156, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 157, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 158, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 159, make_transform_iterator(counting_iterator<int>(0), 200*_1)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 160, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 161, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 162, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 163, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 164, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 165, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 166, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 167, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 168, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 169, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 170, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 171, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 172, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 173, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 174, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 175, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 176, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 177, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 178, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 179, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 180, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 181, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 182, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 183, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 184, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 185, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 186, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 187, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 188, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 189, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 190, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 191, make_transform_iterator(counting_iterator<int>(0), 200*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 192, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 193, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 194, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 195, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 196, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 197, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 198, make_transform_iterator(counting_iterator<int>(0), 200*_1)), make_permutation_iterator(fi.begin() + 199, make_transform_iterator(counting_iterator<int>(0), 200*_1)))))))), make_zip_iterator(make_tuple(U0i.begin(), U0pi.begin())), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(dUi.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 25*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(dUi.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 25*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(dUi.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(dUi.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 25*_1)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(Ji.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 25*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(Ji.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 25*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(Ji.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Ji.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 25*_1)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(Jpi.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 25*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(Jpi.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 25*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(Jpi.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(Jpi.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 25*_1)))))))), mui.begin(), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(norm1i.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 25*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(norm1i.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 25*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(norm1i.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm1i.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 25*_1)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(norm2i.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 25*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(norm2i.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 25*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(norm2i.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm2i.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 25*_1)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(norm3i.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 25*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(norm3i.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 25*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(norm3i.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 25*_1)), make_permutation_iterator(norm3i.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 25*_1)))))), Hi.begin()));
auto zipend = make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 25, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 26, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 27, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 28, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 29, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 30, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 31, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 32, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 33, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 34, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 35, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 36, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 37, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 38, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 39, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 40, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 41, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 42, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 43, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 44, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 45, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 46, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 47, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 48, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 49, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 50, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 51, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 52, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 53, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 54, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 55, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 56, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 57, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 58, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 59, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 60, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 61, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 62, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 63, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 64, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 65, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 66, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 67, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 68, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 69, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 70, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 71, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 72, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 73, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 74, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 75, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 76, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 77, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 78, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 79, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 80, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 81, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 82, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 83, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 84, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 85, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 86, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 87, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 88, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 89, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 90, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 91, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 92, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 93, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 94, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 95, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 96, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 97, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 98, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 99, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 100, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 101, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 102, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 103, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 104, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 105, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 106, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 107, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 108, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 109, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 110, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 111, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 112, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 113, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 114, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 115, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 116, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 117, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 118, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 119, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 120, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 121, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 122, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 123, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 124, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 125, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 126, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 127, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 128, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 129, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 130, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 131, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 132, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 133, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 134, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 135, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 136, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 137, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 138, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 139, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 140, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 141, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 142, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 143, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 144, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 145, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 146, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 147, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 148, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 149, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 150, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 151, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 152, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 153, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 154, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 155, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 156, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 157, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 158, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 159, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 160, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 161, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 162, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 163, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 164, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 165, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 166, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 167, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 168, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 169, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 170, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 171, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 172, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 173, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 174, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 175, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 176, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 177, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 178, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 179, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 180, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 181, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 182, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 183, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 184, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 185, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 186, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 187, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 188, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 189, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 190, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 191, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 192, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 193, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 194, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 195, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 196, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 197, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 198, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fci.begin() + 199, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 25, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 26, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 27, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 28, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 29, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 30, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 31, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 32, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 33, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 34, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 35, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 36, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 37, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 38, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 39, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 40, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 41, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 42, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 43, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 44, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 45, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 46, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 47, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 48, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 49, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 50, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 51, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 52, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 53, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 54, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 55, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 56, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 57, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 58, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 59, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 60, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 61, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 62, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 63, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 64, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 65, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 66, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 67, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 68, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 69, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 70, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 71, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 72, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 73, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 74, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 75, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 76, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 77, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 78, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 79, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 80, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 81, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 82, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 83, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 84, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 85, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 86, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 87, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 88, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 89, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 90, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 91, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 92, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 93, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 94, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 95, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 96, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 97, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 98, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 99, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 100, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 101, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 102, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 103, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 104, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 105, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 106, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 107, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 108, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 109, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 110, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 111, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 112, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 113, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 114, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 115, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 116, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 117, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 118, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 119, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 120, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 121, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 122, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 123, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 124, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 125, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 126, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 127, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 128, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 129, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 130, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 131, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 132, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 133, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 134, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 135, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 136, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 137, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 138, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 139, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 140, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 141, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 142, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 143, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 144, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 145, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 146, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 147, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 148, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 149, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 150, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 151, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 152, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 153, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 154, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 155, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 156, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 157, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 158, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 159, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 160, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 161, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 162, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 163, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 164, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 165, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 166, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 167, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 168, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 169, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 170, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 171, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 172, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 173, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 174, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 175, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 176, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 177, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 178, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 179, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 180, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 181, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 182, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 183, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 184, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 185, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 186, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 187, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 188, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 189, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 190, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 191, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 192, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 193, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 194, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 195, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 196, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 197, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 198, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L, make_permutation_iterator(fi.begin() + 199, make_transform_iterator(counting_iterator<int>(0), 200*_1)) + N*L)))))), make_zip_iterator(make_tuple(U0i.end(), U0pi.end())), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(dUi.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(dUi.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(dUi.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(dUi.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L)))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(Ji.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(Ji.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(Ji.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Ji.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L)))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(Jpi.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(Jpi.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(Jpi.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L)))))), mui.end(), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(norm1i.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(norm1i.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(norm1i.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L)))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(norm2i.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(norm2i.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(norm2i.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L)))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(norm3i.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(norm3i.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(norm3i.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 25*_1)) + N*L)))), Hi.end()));
