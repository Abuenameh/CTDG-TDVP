auto zip = make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 80*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 80*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 80*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 25, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 26, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 27, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 28, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 29, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 30, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 31, make_transform_iterator(counting_iterator<int>(0), 80*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 32, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 33, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 34, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 35, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 36, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 37, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 38, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 39, make_transform_iterator(counting_iterator<int>(0), 80*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 40, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 41, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 42, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 43, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 44, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 45, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 46, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 47, make_transform_iterator(counting_iterator<int>(0), 80*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 48, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 49, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 50, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 51, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 52, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 53, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 54, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 55, make_transform_iterator(counting_iterator<int>(0), 80*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 56, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 57, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 58, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 59, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 60, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 61, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 62, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 63, make_transform_iterator(counting_iterator<int>(0), 80*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 64, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 65, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 66, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 67, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 68, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 69, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 70, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 71, make_transform_iterator(counting_iterator<int>(0), 80*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 72, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 73, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 74, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 75, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 76, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 77, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 78, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fci.begin() + 79, make_transform_iterator(counting_iterator<int>(0), 80*_1)))))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 80*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 80*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 80*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 25, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 26, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 27, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 28, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 29, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 30, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 31, make_transform_iterator(counting_iterator<int>(0), 80*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 32, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 33, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 34, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 35, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 36, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 37, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 38, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 39, make_transform_iterator(counting_iterator<int>(0), 80*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 40, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 41, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 42, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 43, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 44, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 45, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 46, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 47, make_transform_iterator(counting_iterator<int>(0), 80*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 48, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 49, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 50, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 51, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 52, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 53, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 54, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 55, make_transform_iterator(counting_iterator<int>(0), 80*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 56, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 57, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 58, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 59, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 60, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 61, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 62, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 63, make_transform_iterator(counting_iterator<int>(0), 80*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 64, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 65, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 66, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 67, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 68, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 69, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 70, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 71, make_transform_iterator(counting_iterator<int>(0), 80*_1)))), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 72, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 73, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 74, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 75, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 76, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 77, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 78, make_transform_iterator(counting_iterator<int>(0), 80*_1)), make_permutation_iterator(fi.begin() + 79, make_transform_iterator(counting_iterator<int>(0), 80*_1)))))))), make_zip_iterator(make_tuple(U0i.begin(), U0pi.begin())), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(dUi.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(dUi.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(dUi.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(dUi.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(dUi.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(dUi.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(dUi.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(dUi.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(dUi.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(dUi.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 10*_1)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(Ji.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(Ji.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(Ji.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(Ji.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(Ji.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(Ji.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(Ji.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(Ji.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(Ji.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(Ji.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 10*_1)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(Jpi.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(Jpi.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(Jpi.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(Jpi.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(Jpi.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(Jpi.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(Jpi.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(Jpi.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(Jpi.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(Jpi.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 10*_1)))))))), mui.begin(), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(norm1i.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm1i.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm1i.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm1i.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm1i.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm1i.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm1i.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm1i.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm1i.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm1i.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 10*_1)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(norm2i.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm2i.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm2i.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm2i.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm2i.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm2i.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm2i.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm2i.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm2i.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm2i.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 10*_1)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(norm3i.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm3i.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm3i.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm3i.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm3i.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm3i.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm3i.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm3i.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm3i.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 10*_1)), make_permutation_iterator(norm3i.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 10*_1)))))), Hi.begin()));
auto zipend = make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 25, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 26, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 27, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 28, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 29, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 30, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 31, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 32, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 33, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 34, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 35, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 36, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 37, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 38, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 39, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 40, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 41, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 42, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 43, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 44, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 45, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 46, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 47, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 48, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 49, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 50, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 51, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 52, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 53, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 54, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 55, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 56, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 57, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 58, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 59, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 60, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 61, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 62, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 63, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 64, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 65, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 66, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 67, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 68, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 69, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 70, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 71, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fci.begin() + 72, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 73, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 74, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 75, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 76, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 77, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 78, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fci.begin() + 79, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)))))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 10, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 11, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 12, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 13, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 14, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 15, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 16, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 17, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 18, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 19, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 20, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 21, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 22, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 23, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 24, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 25, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 26, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 27, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 28, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 29, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 30, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 31, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 32, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 33, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 34, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 35, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 36, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 37, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 38, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 39, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 40, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 41, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 42, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 43, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 44, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 45, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 46, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 47, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 48, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 49, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 50, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 51, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 52, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 53, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 54, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 55, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 56, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 57, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 58, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 59, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 60, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 61, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 62, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 63, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 64, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 65, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 66, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 67, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 68, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 69, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 70, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 71, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)), make_zip_iterator(make_tuple(make_permutation_iterator(fi.begin() + 72, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 73, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 74, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 75, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 76, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 77, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 78, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L, make_permutation_iterator(fi.begin() + 79, make_transform_iterator(counting_iterator<int>(0), 80*_1)) + N*L)))))), make_zip_iterator(make_tuple(U0i.end(), U0pi.end())), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(dUi.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(dUi.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(dUi.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(dUi.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(dUi.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(dUi.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(dUi.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(dUi.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(dUi.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(dUi.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L)))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(Ji.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(Ji.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(Ji.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(Ji.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(Ji.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(Ji.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(Ji.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(Ji.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(Ji.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(Ji.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L)))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(Jpi.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(Jpi.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L)))))), mui.end(), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(norm1i.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm1i.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L)))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(norm2i.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm2i.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L)))), make_zip_iterator(make_tuple(make_zip_iterator(make_tuple(make_permutation_iterator(norm3i.begin() + 0, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 1, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 2, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 3, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 4, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 5, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 6, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 7, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 8, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L, make_permutation_iterator(norm3i.begin() + 9, make_transform_iterator(counting_iterator<int>(0), 10*_1)) + N*L)))), Hi.end()));
